"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/replicate";
exports.ids = ["vendor-chunks/replicate"];
exports.modules = {

/***/ "(rsc)/./node_modules/replicate/index.js":
/*!*****************************************!*\
  !*** ./node_modules/replicate/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst collections = __webpack_require__(/*! ./lib/collections */ \"(rsc)/./node_modules/replicate/lib/collections.js\");\nconst models = __webpack_require__(/*! ./lib/models */ \"(rsc)/./node_modules/replicate/lib/models.js\");\nconst predictions = __webpack_require__(/*! ./lib/predictions */ \"(rsc)/./node_modules/replicate/lib/predictions.js\");\nconst trainings = __webpack_require__(/*! ./lib/trainings */ \"(rsc)/./node_modules/replicate/lib/trainings.js\");\nconst packageJSON = __webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/replicate/package.json\");\n/**\n * Replicate API client library\n *\n * @see https://replicate.com/docs/reference/http\n * @example\n * // Create a new Replicate API client instance\n * const Replicate = require(\"replicate\");\n * const replicate = new Replicate({\n *     // get your token from https://replicate.com/account\n *     auth: process.env.REPLICATE_API_TOKEN,\n *     userAgent: \"my-app/1.2.3\"\n * });\n *\n * // Run a model and await the result:\n * const model = 'owner/model:version-id'\n * const input = {text: 'Hello, world!'}\n * const output = await replicate.run(model, { input });\n */ class Replicate {\n    /**\n   * Create a new Replicate API client instance.\n   *\n   * @param {object} options - Configuration options for the client\n   * @param {string} options.auth - Required. API access token\n   * @param {string} options.userAgent - Identifier of your app\n   * @param {string} [options.baseUrl] - Defaults to https://api.replicate.com/v1\n   * @param {Function} [options.fetch] - Fetch function to use. Defaults to `globalThis.fetch`\n   */ constructor(options){\n        if (!options.auth) {\n            throw new Error(\"Missing required parameter: auth\");\n        }\n        this.auth = options.auth;\n        this.userAgent = options.userAgent || `replicate-javascript/${packageJSON.version}`;\n        this.baseUrl = options.baseUrl || \"https://api.replicate.com/v1\";\n        this.fetch = options.fetch || globalThis.fetch;\n        this.collections = {\n            list: collections.list.bind(this),\n            get: collections.get.bind(this)\n        };\n        this.models = {\n            get: models.get.bind(this),\n            versions: {\n                list: models.versions.list.bind(this),\n                get: models.versions.get.bind(this)\n            }\n        };\n        this.predictions = {\n            create: predictions.create.bind(this),\n            get: predictions.get.bind(this),\n            cancel: predictions.cancel.bind(this),\n            list: predictions.list.bind(this)\n        };\n        this.trainings = {\n            create: trainings.create.bind(this),\n            get: trainings.get.bind(this),\n            cancel: trainings.cancel.bind(this),\n            list: trainings.list.bind(this)\n        };\n    }\n    /**\n   * Run a model and wait for its output.\n   *\n   * @param {string} identifier - Required. The model version identifier in the format \"{owner}/{name}:{version}\"\n   * @param {object} options\n   * @param {object} options.input - Required. An object with the model inputs\n   * @param {object} [options.wait] - Whether to wait for the prediction to finish. Defaults to false\n   * @param {number} [options.wait.interval] - Polling interval in milliseconds. Defaults to 250\n   * @param {number} [options.wait.maxAttempts] - Maximum number of polling attempts. Defaults to no limit\n   * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n   * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n   * @throws {Error} If the prediction failed\n   * @returns {Promise<object>} - Resolves with the output of running the model\n   */ async run(identifier, options) {\n        // Define a pattern for owner and model names that allows\n        // letters, digits, and certain special characters.\n        // Example: \"user123\", \"abc__123\", \"user.name\"\n        const namePattern = /[a-zA-Z0-9]+(?:(?:[._]|__|[-]*)[a-zA-Z0-9]+)*/;\n        // Define a pattern for \"owner/name:version\" format with named capturing groups.\n        // Example: \"user123/repo_a:1a2b3c\"\n        const pattern = new RegExp(`^(?<owner>${namePattern.source})/(?<name>${namePattern.source}):(?<version>[0-9a-fA-F]+)$`);\n        const match = identifier.match(pattern);\n        if (!match || !match.groups) {\n            throw new Error('Invalid version. It must be in the format \"owner/name:version\"');\n        }\n        const { version } = match.groups;\n        const prediction = await this.predictions.create({\n            wait: true,\n            ...options,\n            version\n        });\n        if (prediction.status === \"failed\") {\n            throw new Error(`Prediction failed: ${prediction.error}`);\n        }\n        return prediction.output;\n    }\n    /**\n   * Make a request to the Replicate API.\n   *\n   * @param {string} route - REST API endpoint path\n   * @param {object} parameters - Request parameters\n   * @param {string} [parameters.method] - HTTP method. Defaults to GET\n   * @param {object} [parameters.params] - Query parameters\n   * @param {object} [parameters.data] - Body parameters\n   * @returns {Promise<object>} - Resolves with the API response data\n   * @throws {Error} If the request failed\n   */ async request(route, parameters) {\n        const { auth, baseUrl, userAgent } = this;\n        const url = new URL(route.startsWith(\"/\") ? route.slice(1) : route, baseUrl.endsWith(\"/\") ? baseUrl : `${baseUrl}/`);\n        const { method = \"GET\", params = {}, data } = parameters;\n        Object.entries(params).forEach(([key, value])=>{\n            url.searchParams.append(key, value);\n        });\n        const headers = {\n            Authorization: `Token ${auth}`,\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": userAgent\n        };\n        const response = await this.fetch(url, {\n            method,\n            headers,\n            body: data ? JSON.stringify(data) : undefined\n        });\n        if (!response.ok) {\n            throw new Error(`API request failed: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    /**\n   * Paginate through a list of results.\n   *\n   * @generator\n   * @example\n   * for await (const page of replicate.paginate(replicate.predictions.list) {\n   *    console.log(page);\n   * }\n   * @param {Function} endpoint - Function that returns a promise for the next page of results\n   * @yields {object[]} Each page of results\n   */ async *paginate(endpoint) {\n        const response = await endpoint();\n        yield response.results;\n        if (response.next) {\n            const nextPage = ()=>this.request(response.next, {\n                    method: \"GET\"\n                });\n            yield* this.paginate(nextPage);\n        }\n    }\n    /**\n   * Wait for a prediction to finish.\n   *\n   * If the prediction has already finished,\n   * this function returns immediately.\n   * Otherwise, it polls the API until the prediction finishes.\n   *\n   * @async\n   * @param {object} prediction - Prediction object\n   * @param {object} options - Options\n   * @param {number} [options.interval] - Polling interval in milliseconds. Defaults to 250\n   * @param {number} [options.maxAttempts] - Maximum number of polling attempts. Defaults to no limit\n   * @throws {Error} If the prediction doesn't complete within the maximum number of attempts\n   * @throws {Error} If the prediction failed\n   * @returns {Promise<object>} Resolves with the completed prediction object\n   */ async wait(prediction, options) {\n        const { id } = prediction;\n        if (!id) {\n            throw new Error(\"Invalid prediction\");\n        }\n        if (prediction.status === \"succeeded\" || prediction.status === \"failed\" || prediction.status === \"canceled\") {\n            return prediction;\n        }\n        let updatedPrediction = await this.predictions.get(id);\n        // eslint-disable-next-line no-promise-executor-return\n        const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n        let attempts = 0;\n        const interval = options.interval || 250;\n        const maxAttempts = options.maxAttempts || null;\n        while(updatedPrediction.status !== \"succeeded\" && updatedPrediction.status !== \"failed\" && updatedPrediction.status !== \"canceled\"){\n            attempts += 1;\n            if (maxAttempts && attempts > maxAttempts) {\n                throw new Error(`Prediction ${id} did not finish after ${maxAttempts} attempts`);\n            }\n            /* eslint-disable no-await-in-loop */ await sleep(interval);\n            updatedPrediction = await this.predictions.get(prediction.id);\n        /* eslint-enable no-await-in-loop */ }\n        if (updatedPrediction.status === \"failed\") {\n            throw new Error(`Prediction failed: ${updatedPrediction.error}`);\n        }\n        return updatedPrediction;\n    }\n}\nmodule.exports = Replicate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/replicate/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/replicate/lib/collections.js":
/*!***************************************************!*\
  !*** ./node_modules/replicate/lib/collections.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/**\n * Fetch a model collection\n *\n * @param {string} collection_slug - Required. The slug of the collection. See http://replicate.com/collections\n * @returns {Promise<object>} - Resolves with the collection data\n */ \nasync function getCollection(collection_slug) {\n    return this.request(`/collections/${collection_slug}`, {\n        method: \"GET\"\n    });\n}\n/**\n * Fetch a list of model collections\n *\n * @returns {Promise<object>} - Resolves with the collections data\n */ async function listCollections() {\n    return this.request(\"/collections\", {\n        method: \"GET\"\n    });\n}\nmodule.exports = {\n    get: getCollection,\n    list: listCollections\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVwbGljYXRlL2xpYi9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQztBQUNELGVBQWVBLGNBQWNDLGVBQWU7SUFDMUMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsRUFBRUQsZ0JBQWdCLENBQUMsRUFBRTtRQUNyREUsUUFBUTtJQUNWO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsZUFBZUM7SUFDYixPQUFPLElBQUksQ0FBQ0YsT0FBTyxDQUFDLGdCQUFnQjtRQUNsQ0MsUUFBUTtJQUNWO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQUVDLEtBQUtQO0lBQWVRLE1BQU1KO0FBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc2Fhcy8uL25vZGVfbW9kdWxlcy9yZXBsaWNhdGUvbGliL2NvbGxlY3Rpb25zLmpzPzFjYzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGZXRjaCBhIG1vZGVsIGNvbGxlY3Rpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbl9zbHVnIC0gUmVxdWlyZWQuIFRoZSBzbHVnIG9mIHRoZSBjb2xsZWN0aW9uLiBTZWUgaHR0cDovL3JlcGxpY2F0ZS5jb20vY29sbGVjdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IC0gUmVzb2x2ZXMgd2l0aCB0aGUgY29sbGVjdGlvbiBkYXRhXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb24oY29sbGVjdGlvbl9zbHVnKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25fc2x1Z31gLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgfSk7XG59XG5cbi8qKlxuICogRmV0Y2ggYSBsaXN0IG9mIG1vZGVsIGNvbGxlY3Rpb25zXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSBSZXNvbHZlcyB3aXRoIHRoZSBjb2xsZWN0aW9ucyBkYXRhXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxpc3RDb2xsZWN0aW9ucygpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdCgnL2NvbGxlY3Rpb25zJywge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0OiBnZXRDb2xsZWN0aW9uLCBsaXN0OiBsaXN0Q29sbGVjdGlvbnMgfTtcbiJdLCJuYW1lcyI6WyJnZXRDb2xsZWN0aW9uIiwiY29sbGVjdGlvbl9zbHVnIiwicmVxdWVzdCIsIm1ldGhvZCIsImxpc3RDb2xsZWN0aW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXQiLCJsaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/replicate/lib/collections.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/replicate/lib/models.js":
/*!**********************************************!*\
  !*** ./node_modules/replicate/lib/models.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/**\n * Get information about a model\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the model data\n */ \nasync function getModel(model_owner, model_name) {\n    return this.request(`/models/${model_owner}/${model_name}`, {\n        method: \"GET\"\n    });\n}\n/**\n * List model versions\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the list of model versions\n */ async function listModelVersions(model_owner, model_name) {\n    return this.request(`/models/${model_owner}/${model_name}/versions`, {\n        method: \"GET\"\n    });\n}\n/**\n * Get a specific model version\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The model version\n * @returns {Promise<object>} Resolves with the model version data\n */ async function getModelVersion(model_owner, model_name, version_id) {\n    return this.request(`/models/${model_owner}/${model_name}/versions/${version_id}`, {\n        method: \"GET\"\n    });\n}\nmodule.exports = {\n    get: getModel,\n    versions: {\n        list: listModelVersions,\n        get: getModelVersion\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVwbGljYXRlL2xpYi9tb2RlbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0QsZUFBZUEsU0FBU0MsV0FBVyxFQUFFQyxVQUFVO0lBQzdDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUVGLFlBQVksQ0FBQyxFQUFFQyxXQUFXLENBQUMsRUFBRTtRQUMxREUsUUFBUTtJQUNWO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDRCxlQUFlQyxrQkFBa0JKLFdBQVcsRUFBRUMsVUFBVTtJQUN0RCxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFRixZQUFZLENBQUMsRUFBRUMsV0FBVyxTQUFTLENBQUMsRUFBRTtRQUNuRUUsUUFBUTtJQUNWO0FBQ0Y7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsZUFBZUUsZ0JBQWdCTCxXQUFXLEVBQUVDLFVBQVUsRUFBRUssVUFBVTtJQUNoRSxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUNqQixDQUFDLFFBQVEsRUFBRUYsWUFBWSxDQUFDLEVBQUVDLFdBQVcsVUFBVSxFQUFFSyxXQUFXLENBQUMsRUFDN0Q7UUFDRUgsUUFBUTtJQUNWO0FBRUo7QUFFQUksT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLEtBQUtWO0lBQ0xXLFVBQVU7UUFBRUMsTUFBTVA7UUFBbUJLLEtBQUtKO0lBQWdCO0FBQzVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc2Fhcy8uL25vZGVfbW9kdWxlcy9yZXBsaWNhdGUvbGliL21vZGVscy5qcz8wNzRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgbW9kZWxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kZWxfb3duZXIgLSBSZXF1aXJlZC4gVGhlIG5hbWUgb2YgdGhlIHVzZXIgb3Igb3JnYW5pemF0aW9uIHRoYXQgb3ducyB0aGUgbW9kZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbF9uYW1lIC0gUmVxdWlyZWQuIFRoZSBuYW1lIG9mIHRoZSBtb2RlbFxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gUmVzb2x2ZXMgd2l0aCB0aGUgbW9kZWwgZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRNb2RlbChtb2RlbF9vd25lciwgbW9kZWxfbmFtZSkge1xuICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvbW9kZWxzLyR7bW9kZWxfb3duZXJ9LyR7bW9kZWxfbmFtZX1gLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgfSk7XG59XG5cbi8qKlxuICogTGlzdCBtb2RlbCB2ZXJzaW9uc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbF9vd25lciAtIFJlcXVpcmVkLiBUaGUgbmFtZSBvZiB0aGUgdXNlciBvciBvcmdhbml6YXRpb24gdGhhdCBvd25zIHRoZSBtb2RlbFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsX25hbWUgLSBSZXF1aXJlZC4gVGhlIG5hbWUgb2YgdGhlIG1vZGVsXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBSZXNvbHZlcyB3aXRoIHRoZSBsaXN0IG9mIG1vZGVsIHZlcnNpb25zXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxpc3RNb2RlbFZlcnNpb25zKG1vZGVsX293bmVyLCBtb2RlbF9uYW1lKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoYC9tb2RlbHMvJHttb2RlbF9vd25lcn0vJHttb2RlbF9uYW1lfS92ZXJzaW9uc2AsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYSBzcGVjaWZpYyBtb2RlbCB2ZXJzaW9uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsX293bmVyIC0gUmVxdWlyZWQuIFRoZSBuYW1lIG9mIHRoZSB1c2VyIG9yIG9yZ2FuaXphdGlvbiB0aGF0IG93bnMgdGhlIG1vZGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kZWxfbmFtZSAtIFJlcXVpcmVkLiBUaGUgbmFtZSBvZiB0aGUgbW9kZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uX2lkIC0gUmVxdWlyZWQuIFRoZSBtb2RlbCB2ZXJzaW9uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBSZXNvbHZlcyB3aXRoIHRoZSBtb2RlbCB2ZXJzaW9uIGRhdGFcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0TW9kZWxWZXJzaW9uKG1vZGVsX293bmVyLCBtb2RlbF9uYW1lLCB2ZXJzaW9uX2lkKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoXG4gICAgYC9tb2RlbHMvJHttb2RlbF9vd25lcn0vJHttb2RlbF9uYW1lfS92ZXJzaW9ucy8ke3ZlcnNpb25faWR9YCxcbiAgICB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgIH1cbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogZ2V0TW9kZWwsXG4gIHZlcnNpb25zOiB7IGxpc3Q6IGxpc3RNb2RlbFZlcnNpb25zLCBnZXQ6IGdldE1vZGVsVmVyc2lvbiB9LFxufTtcbiJdLCJuYW1lcyI6WyJnZXRNb2RlbCIsIm1vZGVsX293bmVyIiwibW9kZWxfbmFtZSIsInJlcXVlc3QiLCJtZXRob2QiLCJsaXN0TW9kZWxWZXJzaW9ucyIsImdldE1vZGVsVmVyc2lvbiIsInZlcnNpb25faWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0IiwidmVyc2lvbnMiLCJsaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/replicate/lib/models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/replicate/lib/predictions.js":
/*!***************************************************!*\
  !*** ./node_modules/replicate/lib/predictions.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/**\n * Create a new prediction\n *\n * @param {object} options\n * @param {string} options.version - Required. The model version\n * @param {object} options.input - Required. An object with the model inputs\n * @param {boolean|object} [options.wait] - Whether to wait for the prediction to finish. Defaults to false\n * @param {number} [options.wait.interval] - Polling interval in milliseconds. Defaults to 250\n * @param {number} [options.wait.maxAttempts] - Maximum number of polling attempts. Defaults to no limit\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the created prediction data\n */ \nasync function createPrediction(options) {\n    const { wait, ...data } = options;\n    if (data.webhook) {\n        try {\n            // eslint-disable-next-line no-new\n            new URL(data.webhook);\n        } catch (err) {\n            throw new Error(\"Invalid webhook URL\");\n        }\n    }\n    const prediction = this.request(\"/predictions\", {\n        method: \"POST\",\n        data\n    });\n    if (wait) {\n        const { maxAttempts, interval } = wait;\n        // eslint-disable-next-line no-promise-executor-return\n        const sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n        await sleep(interval || 250);\n        return this.wait(await prediction, {\n            maxAttempts,\n            interval\n        });\n    }\n    return prediction;\n}\n/**\n * Fetch a prediction by ID\n *\n * @param {number} prediction_id - Required. The prediction ID\n * @returns {Promise<object>} Resolves with the prediction data\n */ async function getPrediction(prediction_id) {\n    return this.request(`/predictions/${prediction_id}`, {\n        method: \"GET\"\n    });\n}\n/**\n * Cancel a prediction by ID\n *\n * @param {string} prediction_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */ async function cancelPrediction(prediction_id) {\n    return this.request(`/predictions/${prediction_id}/cancel`, {\n        method: \"POST\"\n    });\n}\n/**\n * List all predictions\n *\n * @returns {Promise<object>} - Resolves with a page of predictions\n */ async function listPredictions() {\n    return this.request(\"/predictions\", {\n        method: \"GET\"\n    });\n}\nmodule.exports = {\n    create: createPrediction,\n    get: getPrediction,\n    cancel: cancelPrediction,\n    list: listPredictions\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVwbGljYXRlL2xpYi9wcmVkaWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0NBWUM7QUFDRCxlQUFlQSxpQkFBaUJDLE9BQU87SUFDckMsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBR0MsTUFBTSxHQUFHRjtJQUUxQixJQUFJRSxLQUFLQyxPQUFPLEVBQUU7UUFDaEIsSUFBSTtZQUNGLGtDQUFrQztZQUNsQyxJQUFJQyxJQUFJRixLQUFLQyxPQUFPO1FBQ3RCLEVBQUUsT0FBT0UsS0FBSztZQUNaLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtJQUNGO0lBRUEsTUFBTUMsYUFBYSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDOUNDLFFBQVE7UUFDUlA7SUFDRjtJQUVBLElBQUlELE1BQU07UUFDUixNQUFNLEVBQUVTLFdBQVcsRUFBRUMsUUFBUSxFQUFFLEdBQUdWO1FBRWxDLHNEQUFzRDtRQUN0RCxNQUFNVyxRQUFRLENBQUNDLEtBQU8sSUFBSUMsUUFBUSxDQUFDQyxVQUFZQyxXQUFXRCxTQUFTRjtRQUNuRSxNQUFNRCxNQUFNRCxZQUFZO1FBRXhCLE9BQU8sSUFBSSxDQUFDVixJQUFJLENBQUMsTUFBTU0sWUFBWTtZQUFFRztZQUFhQztRQUFTO0lBQzdEO0lBRUEsT0FBT0o7QUFDVDtBQUVBOzs7OztDQUtDLEdBQ0QsZUFBZVUsY0FBY0MsYUFBYTtJQUN4QyxPQUFPLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUMsYUFBYSxFQUFFVSxjQUFjLENBQUMsRUFBRTtRQUNuRFQsUUFBUTtJQUNWO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELGVBQWVVLGlCQUFpQkQsYUFBYTtJQUMzQyxPQUFPLElBQUksQ0FBQ1YsT0FBTyxDQUFDLENBQUMsYUFBYSxFQUFFVSxjQUFjLE9BQU8sQ0FBQyxFQUFFO1FBQzFEVCxRQUFRO0lBQ1Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxlQUFlVztJQUNiLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUMsZ0JBQWdCO1FBQ2xDQyxRQUFRO0lBQ1Y7QUFDRjtBQUVBWSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsUUFBUXhCO0lBQ1J5QixLQUFLUDtJQUNMUSxRQUFRTjtJQUNSTyxNQUFNTjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktc2Fhcy8uL25vZGVfbW9kdWxlcy9yZXBsaWNhdGUvbGliL3ByZWRpY3Rpb25zLmpzP2VjNjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGUgYSBuZXcgcHJlZGljdGlvblxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy52ZXJzaW9uIC0gUmVxdWlyZWQuIFRoZSBtb2RlbCB2ZXJzaW9uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5pbnB1dCAtIFJlcXVpcmVkLiBBbiBvYmplY3Qgd2l0aCB0aGUgbW9kZWwgaW5wdXRzXG4gKiBAcGFyYW0ge2Jvb2xlYW58b2JqZWN0fSBbb3B0aW9ucy53YWl0XSAtIFdoZXRoZXIgdG8gd2FpdCBmb3IgdGhlIHByZWRpY3Rpb24gdG8gZmluaXNoLiBEZWZhdWx0cyB0byBmYWxzZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndhaXQuaW50ZXJ2YWxdIC0gUG9sbGluZyBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIDI1MFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndhaXQubWF4QXR0ZW1wdHNdIC0gTWF4aW11bSBudW1iZXIgb2YgcG9sbGluZyBhdHRlbXB0cy4gRGVmYXVsdHMgdG8gbm8gbGltaXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy53ZWJob29rXSAtIEFuIEhUVFBTIFVSTCBmb3IgcmVjZWl2aW5nIGEgd2ViaG9vayB3aGVuIHRoZSBwcmVkaWN0aW9uIGhhcyBuZXcgb3V0cHV0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy53ZWJob29rX2V2ZW50c19maWx0ZXJdIC0gWW91IGNhbiBjaGFuZ2Ugd2hpY2ggZXZlbnRzIHRyaWdnZXIgd2ViaG9vayByZXF1ZXN0cyBieSBzcGVjaWZ5aW5nIHdlYmhvb2sgZXZlbnRzIChgc3RhcnRgfGBvdXRwdXRgfGBsb2dzYHxgY29tcGxldGVkYClcbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIGNyZWF0ZWQgcHJlZGljdGlvbiBkYXRhXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVByZWRpY3Rpb24ob3B0aW9ucykge1xuICBjb25zdCB7IHdhaXQsIC4uLmRhdGEgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGRhdGEud2ViaG9vaykge1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVVJMKGRhdGEud2ViaG9vayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgd2ViaG9vayBVUkwnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwcmVkaWN0aW9uID0gdGhpcy5yZXF1ZXN0KCcvcHJlZGljdGlvbnMnLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZGF0YSxcbiAgfSk7XG5cbiAgaWYgKHdhaXQpIHtcbiAgICBjb25zdCB7IG1heEF0dGVtcHRzLCBpbnRlcnZhbCB9ID0gd2FpdDtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm9taXNlLWV4ZWN1dG9yLXJldHVyblxuICAgIGNvbnN0IHNsZWVwID0gKG1zKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xuICAgIGF3YWl0IHNsZWVwKGludGVydmFsIHx8IDI1MCk7XG5cbiAgICByZXR1cm4gdGhpcy53YWl0KGF3YWl0IHByZWRpY3Rpb24sIHsgbWF4QXR0ZW1wdHMsIGludGVydmFsIH0pO1xuICB9XG5cbiAgcmV0dXJuIHByZWRpY3Rpb247XG59XG5cbi8qKlxuICogRmV0Y2ggYSBwcmVkaWN0aW9uIGJ5IElEXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHByZWRpY3Rpb25faWQgLSBSZXF1aXJlZC4gVGhlIHByZWRpY3Rpb24gSURcbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIHByZWRpY3Rpb24gZGF0YVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQcmVkaWN0aW9uKHByZWRpY3Rpb25faWQpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdChgL3ByZWRpY3Rpb25zLyR7cHJlZGljdGlvbl9pZH1gLCB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgfSk7XG59XG5cbi8qKlxuICogQ2FuY2VsIGEgcHJlZGljdGlvbiBieSBJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVkaWN0aW9uX2lkIC0gUmVxdWlyZWQuIFRoZSB0cmFpbmluZyBJRFxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gUmVzb2x2ZXMgd2l0aCB0aGUgZGF0YSBmb3IgdGhlIHRyYWluaW5nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhbmNlbFByZWRpY3Rpb24ocHJlZGljdGlvbl9pZCkge1xuICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvcHJlZGljdGlvbnMvJHtwcmVkaWN0aW9uX2lkfS9jYW5jZWxgLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gIH0pO1xufVxuXG4vKipcbiAqIExpc3QgYWxsIHByZWRpY3Rpb25zXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSBSZXNvbHZlcyB3aXRoIGEgcGFnZSBvZiBwcmVkaWN0aW9uc1xuICovXG5hc3luYyBmdW5jdGlvbiBsaXN0UHJlZGljdGlvbnMoKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoJy9wcmVkaWN0aW9ucycsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlUHJlZGljdGlvbixcbiAgZ2V0OiBnZXRQcmVkaWN0aW9uLFxuICBjYW5jZWw6IGNhbmNlbFByZWRpY3Rpb24sXG4gIGxpc3Q6IGxpc3RQcmVkaWN0aW9ucyxcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlUHJlZGljdGlvbiIsIm9wdGlvbnMiLCJ3YWl0IiwiZGF0YSIsIndlYmhvb2siLCJVUkwiLCJlcnIiLCJFcnJvciIsInByZWRpY3Rpb24iLCJyZXF1ZXN0IiwibWV0aG9kIiwibWF4QXR0ZW1wdHMiLCJpbnRlcnZhbCIsInNsZWVwIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJnZXRQcmVkaWN0aW9uIiwicHJlZGljdGlvbl9pZCIsImNhbmNlbFByZWRpY3Rpb24iLCJsaXN0UHJlZGljdGlvbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlIiwiZ2V0IiwiY2FuY2VsIiwibGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/replicate/lib/predictions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/replicate/lib/trainings.js":
/*!*************************************************!*\
  !*** ./node_modules/replicate/lib/trainings.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\n * Create a new training\n *\n * @param {string} model_owner - Required. The username of the user or organization who owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The version ID\n * @param {object} options\n * @param {string} options.destination - Required. The destination for the trained version in the form \"{username}/{model_name}\"\n * @param {object} options.input - Required. An object with the model inputs\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the training updates\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the data for the created training\n */ \nasync function createTraining(model_owner, model_name, version_id, options) {\n    const { ...data } = options;\n    if (data.webhook) {\n        try {\n            // eslint-disable-next-line no-new\n            new URL(data.webhook);\n        } catch (err) {\n            throw new Error(\"Invalid webhook URL\");\n        }\n    }\n    const training = this.request(`/models/${model_owner}/${model_name}/versions/${version_id}/trainings`, {\n        method: \"POST\",\n        data\n    });\n    return training;\n}\n/**\n * Fetch a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */ async function getTraining(training_id) {\n    return this.request(`/trainings/${training_id}`, {\n        method: \"GET\"\n    });\n}\n/**\n * Cancel a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */ async function cancelTraining(training_id) {\n    return this.request(`/trainings/${training_id}/cancel`, {\n        method: \"POST\"\n    });\n}\n/**\n * List all trainings\n *\n * @returns {Promise<object>} - Resolves with a page of trainings\n */ async function listTrainings() {\n    return this.request(\"/trainings\", {\n        method: \"GET\"\n    });\n}\nmodule.exports = {\n    create: createTraining,\n    get: getTraining,\n    cancel: cancelTraining,\n    list: listTrainings\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVwbGljYXRlL2xpYi90cmFpbmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztDQVlDO0FBQ0QsZUFBZUEsZUFBZUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsT0FBTztJQUN4RSxNQUFNLEVBQUUsR0FBR0MsTUFBTSxHQUFHRDtJQUVwQixJQUFJQyxLQUFLQyxPQUFPLEVBQUU7UUFDaEIsSUFBSTtZQUNGLGtDQUFrQztZQUNsQyxJQUFJQyxJQUFJRixLQUFLQyxPQUFPO1FBQ3RCLEVBQUUsT0FBT0UsS0FBSztZQUNaLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtJQUNGO0lBRUEsTUFBTUMsV0FBVyxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRVYsWUFBWSxDQUFDLEVBQUVDLFdBQVcsVUFBVSxFQUFFQyxXQUFXLFVBQVUsQ0FBQyxFQUFFO1FBQ3JHUyxRQUFRO1FBQ1JQO0lBQ0Y7SUFFQSxPQUFPSztBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxlQUFlRyxZQUFZQyxXQUFXO0lBQ3BDLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUVHLFlBQVksQ0FBQyxFQUFFO1FBQy9DRixRQUFRO0lBQ1Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsZUFBZUcsZUFBZUQsV0FBVztJQUN2QyxPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFRyxZQUFZLE9BQU8sQ0FBQyxFQUFFO1FBQ3RERixRQUFRO0lBQ1Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxlQUFlSTtJQUNiLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUMsY0FBYztRQUNoQ0MsUUFBUTtJQUNWO0FBQ0Y7QUFFQUssT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFFBQVFuQjtJQUNSb0IsS0FBS1A7SUFDTFEsUUFBUU47SUFDUk8sTUFBTU47QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXNhYXMvLi9ub2RlX21vZHVsZXMvcmVwbGljYXRlL2xpYi90cmFpbmluZ3MuanM/MzE3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZSBhIG5ldyB0cmFpbmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbF9vd25lciAtIFJlcXVpcmVkLiBUaGUgdXNlcm5hbWUgb2YgdGhlIHVzZXIgb3Igb3JnYW5pemF0aW9uIHdobyBvd25zIHRoZSBtb2RlbFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsX25hbWUgLSBSZXF1aXJlZC4gVGhlIG5hbWUgb2YgdGhlIG1vZGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvbl9pZCAtIFJlcXVpcmVkLiBUaGUgdmVyc2lvbiBJRFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmRlc3RpbmF0aW9uIC0gUmVxdWlyZWQuIFRoZSBkZXN0aW5hdGlvbiBmb3IgdGhlIHRyYWluZWQgdmVyc2lvbiBpbiB0aGUgZm9ybSBcInt1c2VybmFtZX0ve21vZGVsX25hbWV9XCJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmlucHV0IC0gUmVxdWlyZWQuIEFuIG9iamVjdCB3aXRoIHRoZSBtb2RlbCBpbnB1dHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy53ZWJob29rXSAtIEFuIEhUVFBTIFVSTCBmb3IgcmVjZWl2aW5nIGEgd2ViaG9vayB3aGVuIHRoZSB0cmFpbmluZyB1cGRhdGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy53ZWJob29rX2V2ZW50c19maWx0ZXJdIC0gWW91IGNhbiBjaGFuZ2Ugd2hpY2ggZXZlbnRzIHRyaWdnZXIgd2ViaG9vayByZXF1ZXN0cyBieSBzcGVjaWZ5aW5nIHdlYmhvb2sgZXZlbnRzIChgc3RhcnRgfGBvdXRwdXRgfGBsb2dzYHxgY29tcGxldGVkYClcbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIGRhdGEgZm9yIHRoZSBjcmVhdGVkIHRyYWluaW5nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRyYWluaW5nKG1vZGVsX293bmVyLCBtb2RlbF9uYW1lLCB2ZXJzaW9uX2lkLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgLi4uZGF0YSB9ID0gb3B0aW9ucztcblxuICBpZiAoZGF0YS53ZWJob29rKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXdcbiAgICAgIG5ldyBVUkwoZGF0YS53ZWJob29rKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB3ZWJob29rIFVSTCcpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRyYWluaW5nID0gdGhpcy5yZXF1ZXN0KGAvbW9kZWxzLyR7bW9kZWxfb3duZXJ9LyR7bW9kZWxfbmFtZX0vdmVyc2lvbnMvJHt2ZXJzaW9uX2lkfS90cmFpbmluZ3NgLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZGF0YSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYWluaW5nO1xufVxuXG4vKipcbiAqIEZldGNoIGEgdHJhaW5pbmcgYnkgSURcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHJhaW5pbmdfaWQgLSBSZXF1aXJlZC4gVGhlIHRyYWluaW5nIElEXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBSZXNvbHZlcyB3aXRoIHRoZSBkYXRhIGZvciB0aGUgdHJhaW5pbmdcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VHJhaW5pbmcodHJhaW5pbmdfaWQpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdChgL3RyYWluaW5ncy8ke3RyYWluaW5nX2lkfWAsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICB9KTtcbn1cblxuLyoqXG4gKiBDYW5jZWwgYSB0cmFpbmluZyBieSBJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cmFpbmluZ19pZCAtIFJlcXVpcmVkLiBUaGUgdHJhaW5pbmcgSURcbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIGRhdGEgZm9yIHRoZSB0cmFpbmluZ1xuICovXG5hc3luYyBmdW5jdGlvbiBjYW5jZWxUcmFpbmluZyh0cmFpbmluZ19pZCkge1xuICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvdHJhaW5pbmdzLyR7dHJhaW5pbmdfaWR9L2NhbmNlbGAsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgfSk7XG59XG5cbi8qKlxuICogTGlzdCBhbGwgdHJhaW5pbmdzXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSBSZXNvbHZlcyB3aXRoIGEgcGFnZSBvZiB0cmFpbmluZ3NcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbGlzdFRyYWluaW5ncygpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdCgnL3RyYWluaW5ncycsIHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZTogY3JlYXRlVHJhaW5pbmcsXG4gIGdldDogZ2V0VHJhaW5pbmcsXG4gIGNhbmNlbDogY2FuY2VsVHJhaW5pbmcsXG4gIGxpc3Q6IGxpc3RUcmFpbmluZ3MsXG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVRyYWluaW5nIiwibW9kZWxfb3duZXIiLCJtb2RlbF9uYW1lIiwidmVyc2lvbl9pZCIsIm9wdGlvbnMiLCJkYXRhIiwid2ViaG9vayIsIlVSTCIsImVyciIsIkVycm9yIiwidHJhaW5pbmciLCJyZXF1ZXN0IiwibWV0aG9kIiwiZ2V0VHJhaW5pbmciLCJ0cmFpbmluZ19pZCIsImNhbmNlbFRyYWluaW5nIiwibGlzdFRyYWluaW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGUiLCJnZXQiLCJjYW5jZWwiLCJsaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/replicate/lib/trainings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/replicate/package.json":
/*!*********************************************!*\
  !*** ./node_modules/replicate/package.json ***!
  \*********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"replicate","version":"0.12.3","description":"JavaScript client for Replicate","repository":"github:replicate/replicate-javascript","homepage":"https://github.com/replicate/replicate-javascript#readme","bugs":"https://github.com/replicate/replicate-javascript/issues","license":"Apache-2.0","main":"index.js","engines":{"node":">=16.6.0","npm":">=7.19.0","git":">=2.11.0","yarn":">=1.7.0"},"scripts":{"lint":"eslint .","test":"jest"},"devDependencies":{"@types/jest":"^29.5.0","@typescript-eslint/eslint-plugin":"^5.56.0","cross-fetch":"^3.1.5","eslint":"^8.36.0","eslint-config-airbnb-base":"^15.0.0","eslint-plugin-import":"^2.27.5","eslint-plugin-jest":"^27.2.1","eslint-plugin-jsdoc":"^46.2.6","eslint-plugin-n":"^15.6.1","eslint-plugin-promise":"^6.1.1","jest":"^29.5.0","nock":"^13.3.0","ts-jest":"^29.1.0","typescript":"^5.0.2"}}');

/***/ })

};
;